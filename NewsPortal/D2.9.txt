from News.models import *

1. Создать двух пользователей (с помощью метода User.objects.create_user('username')).

u1 = User.objects.create_user(username='Tania')
u2 = User.objects.create_user(username='Lera')

2. Создать два объекта модели Author, связанные с пользователями.

Author.objects.create(authorUser=u1)
Author.objects.create(authorUser=u2)

author1 = Author.objects.get(id=1)
author2 = Author.objects.get(id=2)

3. Добавить 4 категории в модель Category.

Category.objects.create(name='Dogs')
Category.objects.create(name='Cats')
Category.objects.create(name='Turtles')
Category.objects.create(name='Others')

4. Добавить 2 статьи и 1 новость.

#Post.objects.create(author=Author.objects.get(authorUser=User.object.get(username='Tania')), categoryTupe='NW', title='title1', text='text1')

Post.objects.create(author=author1, categoryType='NW', title='title1', text='text1')
Post.objects.create(author=author2, categoryType='AR', title='titlear1', text='bigtext1')
Post.objects.create(author=author2, categoryType='AR', title='titlear2', text='bigtext2')

p1 = Post.objects.get(pk=1)
p2 = Post.objects.get(pk=2)
p3 = Post.objects.get(pk=3)

5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

#Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1))
#Post.objects.get(id=2).postCategory.add(Category.objects.get(id=2)) 
#Post.objects.get(id=3).postCategory.add(Category.objects.get(id=3))

c1 = Category.objects.get(name='Dogs')
c2 = Category.objects.get(name='Cats')
c3 = Category.objects.get(name='Turtles')
c4 = Category.objects.get(name='Others')

p1.postCategory.add(c1)
p2.postCategory.add(c1, c2)
p3.postCategory.add(c3)


6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, text='commenttext1')
Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=2).authorUser, text='commenttext2') 
Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=2).authorUser, text='commenttext3')
Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=2).authorUser, text='commenttext4')

7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

Post.objects.get(id=1).like()
Post.objects.get(id=1).like()
Post.objects.get(id=2).like()
Post.objects.get(id=3).dislike()

Comment.objects.get(id=1).like()
Comment.objects.get(id=1).dislike()

Post.objects.get(id=1).rating (получить рейтинг)

8. Обновить рейтинги пользователей.

Author.objects.get(authorUser=User.objects.get(username='Tania')).update_rating()
Author.objects.get(authorUser=User.objects.get(username='Lera')).update_rating()

a = Author.objects.get(authorUser=User.objects.get(username='Tania'))
a.ratingAuthor

b = Author.objects.get(authorUser=User.objects.get(username='Lera'))
b.ratingAuthor

9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

best = Author.objects.all().order_by('-ratingAuthor').values('authorUser', 'ratingAuthor')[0]
print(best)

#a = Author.objects.order_by('-ratingAuthor')[:1]

10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

a = Post.objects.order_by('-rating)
for i in a:
i.dateCreation
i.author
i.rating
i.title
i.preview

11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

a = Comment.objects.order_by('-rating')
for i in a:
i.dateCreation
i.CommentUser
i.rating
i.text
